Warning : Terminal "MULT" was declared but never used
Warning : Terminal "RIGHTANGLEBRACKET" was declared but never used
Warning : Terminal "ELSE" was declared but never used
===== Terminals =====
[0]EOF [1]error [2]DISPLAY [3]STATIC [4]VOID 
[5]MAIN [6]PUBLIC [7]CLASS [8]IF [9]ELSE 
[10]WHILE [11]THIS [12]RETURN [13]TRUE [14]FALSE 
[15]NEW [16]STRING [17]PRINTLN [18]INT [19]BOOLEAN 
[20]LENGTH [21]EXTENDS [22]PLUS [23]MINUS [24]MULT 
[25]BECOMES [26]AND [27]NOT [28]LPAREN [29]RPAREN 
[30]SEMICOLON [31]LEFTCURLYBRACKET [32]RIGHTCURLYBRACKET [33]LEFTBRACKET [34]RIGHTBRACKET 
[35]COMMA [36]RIGHTANGLEBRACKET [37]LEFTANGLEBRACKET [38]PERIOD [39]IDENTIFIER 
[40]INTEGER_LITERAL 

===== Non terminals =====
[0]Program [1]MainClass [2]ClassDeclListDef [3]ClassDeclarations [4]FormalListDef 
[5]Formal [6]VarDeclarationListDef [7]VarDeclaration [8]MethodListDeclarationsDef [9]MethodDeclarations 
[10]Type [11]StatementList [12]Statement [13]BlockStatement [14]IfStatement 
[15]WhileStatement [16]PrintStatement [17]AssignStatement [18]ArrayAssignStatement [19]DisplayStatement 
[20]ExpressionListDef [21]Expression [22]Identifier [23]NT$0 [24]NT$1 
[25]NT$2 

===== Productions =====
[0] Program ::= MainClass ClassDeclListDef 
[1] $START ::= Program EOF 
[2] Program ::= MainClass 
[3] MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET 
[4] ClassDeclListDef ::= ClassDeclarations 
[5] ClassDeclListDef ::= ClassDeclListDef COMMA ClassDeclarations 
[6] ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET 
[7] ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET 
[8] ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET 
[9] ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET 
[10] ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET 
[11] ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET 
[12] ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET 
[13] ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET 
[14] MethodListDeclarationsDef ::= MethodDeclarations 
[15] MethodListDeclarationsDef ::= MethodListDeclarationsDef COMMA MethodDeclarations 
[16] MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET 
[17] MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET 
[18] MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET 
[19] MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET 
[20] MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET 
[21] MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET 
[22] MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET 
[23] MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET 
[24] VarDeclarationListDef ::= VarDeclaration 
[25] VarDeclarationListDef ::= VarDeclarationListDef VarDeclaration 
[26] VarDeclaration ::= Type Identifier SEMICOLON 
[27] FormalListDef ::= Formal 
[28] FormalListDef ::= FormalListDef COMMA Formal 
[29] Formal ::= Type Identifier 
[30] NT$0 ::= 
[31] NT$1 ::= 
[32] NT$2 ::= 
[33] Type ::= INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER 
[34] ExpressionListDef ::= Expression 
[35] ExpressionListDef ::= ExpressionListDef COMMA Expression 
[36] Statement ::= AssignStatement 
[37] Statement ::= BlockStatement 
[38] Statement ::= PrintStatement 
[39] Statement ::= IfStatement 
[40] Statement ::= WhileStatement 
[41] Statement ::= ArrayAssignStatement 
[42] Statement ::= DisplayStatement 
[43] StatementList ::= Statement 
[44] StatementList ::= StatementList Statement 
[45] AssignStatement ::= Identifier BECOMES Expression SEMICOLON 
[46] DisplayStatement ::= DISPLAY Expression SEMICOLON 
[47] IfStatement ::= IF LPAREN Expression RPAREN Statement 
[48] WhileStatement ::= WHILE LPAREN Expression RPAREN Statement 
[49] BlockStatement ::= LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET 
[50] PrintStatement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON 
[51] ArrayAssignStatement ::= Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON 
[52] Expression ::= Expression AND Expression 
[53] Expression ::= Expression LEFTANGLEBRACKET Expression 
[54] Expression ::= Expression PLUS Expression 
[55] Expression ::= Expression MINUS Expression 
[56] Expression ::= Expression LEFTBRACKET Expression RIGHTBRACKET 
[57] Expression ::= Expression PERIOD LENGTH 
[58] Expression ::= Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN 
[59] Expression ::= Expression PERIOD Identifier LPAREN RPAREN 
[60] Expression ::= INTEGER_LITERAL 
[61] Expression ::= TRUE 
[62] Expression ::= FALSE 
[63] Expression ::= IDENTIFIER 
[64] Expression ::= THIS 
[65] Expression ::= NEW INT LEFTBRACKET Expression RIGHTBRACKET 
[66] Expression ::= NEW Identifier LPAREN RPAREN 
[67] Expression ::= NOT Expression 
[68] Expression ::= LPAREN Expression RPAREN 
[69] Identifier ::= IDENTIFIER 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Program ::= (*) MainClass , {EOF }]
  [$START ::= (*) Program EOF , {EOF }]
  [MainClass ::= (*) CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
  [Program ::= (*) MainClass ClassDeclListDef , {EOF }]
}
transition on CLASS to state [3]
transition on MainClass to state [2]
transition on Program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= Program (*) EOF , {EOF }]
}
transition on EOF to state [193]

-------------------
lalr_state [2]: {
  [ClassDeclarations ::= (*) CLASS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [Program ::= MainClass (*) , {EOF }]
  [ClassDeclListDef ::= (*) ClassDeclListDef COMMA ClassDeclarations , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclListDef ::= (*) ClassDeclarations , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [Program ::= MainClass (*) ClassDeclListDef , {EOF }]
}
transition on ClassDeclListDef to state [102]
transition on CLASS to state [101]
transition on ClassDeclarations to state [100]

-------------------
lalr_state [3]: {
  [MainClass ::= CLASS (*) Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {LEFTCURLYBRACKET }]
}
transition on Identifier to state [5]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [4]: {
  [Identifier ::= IDENTIFIER (*) , {EXTENDS BECOMES LPAREN RPAREN SEMICOLON LEFTCURLYBRACKET LEFTBRACKET COMMA }]
}

-------------------
lalr_state [5]: {
  [MainClass ::= CLASS Identifier (*) LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on LEFTCURLYBRACKET to state [6]

-------------------
lalr_state [6]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET (*) PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on PUBLIC to state [7]

-------------------
lalr_state [7]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC (*) STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on STATIC to state [8]

-------------------
lalr_state [8]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC (*) VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on VOID to state [9]

-------------------
lalr_state [9]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID (*) MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on MAIN to state [10]

-------------------
lalr_state [10]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN (*) LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on LPAREN to state [11]

-------------------
lalr_state [11]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN (*) STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on STRING to state [12]

-------------------
lalr_state [12]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING (*) LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on LEFTBRACKET to state [13]

-------------------
lalr_state [13]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET (*) RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on RIGHTBRACKET to state [14]

-------------------
lalr_state [14]: {
  [Identifier ::= (*) IDENTIFIER , {RPAREN }]
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET (*) Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on Identifier to state [15]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [15]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier (*) RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on RPAREN to state [16]

-------------------
lalr_state [16]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN (*) LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on LEFTCURLYBRACKET to state [17]

-------------------
lalr_state [17]: {
  [Statement ::= (*) WhileStatement , {RIGHTCURLYBRACKET }]
  [Statement ::= (*) BlockStatement , {RIGHTCURLYBRACKET }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {RIGHTCURLYBRACKET }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {RIGHTCURLYBRACKET }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {RIGHTCURLYBRACKET }]
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET (*) Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
  [Statement ::= (*) DisplayStatement , {RIGHTCURLYBRACKET }]
  [Statement ::= (*) IfStatement , {RIGHTCURLYBRACKET }]
  [Statement ::= (*) AssignStatement , {RIGHTCURLYBRACKET }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {RIGHTCURLYBRACKET }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {RIGHTCURLYBRACKET }]
  [Statement ::= (*) ArrayAssignStatement , {RIGHTCURLYBRACKET }]
  [Statement ::= (*) PrintStatement , {RIGHTCURLYBRACKET }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {RIGHTCURLYBRACKET }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on Statement to state [28]
transition on LEFTCURLYBRACKET to state [27]
transition on WhileStatement to state [26]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [18]: {
  [WhileStatement ::= WHILE (*) LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on LPAREN to state [96]

-------------------
lalr_state [19]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [DisplayStatement ::= DISPLAY (*) Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [94]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [20]: {
  [PrintStatement ::= PRINTLN (*) LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on LPAREN to state [90]

-------------------
lalr_state [21]: {
  [Statement ::= DisplayStatement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [22]: {
  [Statement ::= BlockStatement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [23]: {
  [ArrayAssignStatement ::= Identifier (*) LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= Identifier (*) BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on BECOMES to state [82]
transition on LEFTBRACKET to state [81]

-------------------
lalr_state [24]: {
  [Statement ::= IfStatement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [25]: {
  [IfStatement ::= IF (*) LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on LPAREN to state [38]

-------------------
lalr_state [26]: {
  [Statement ::= WhileStatement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [27]: {
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= LEFTCURLYBRACKET (*) StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on Statement to state [35]
transition on LEFTCURLYBRACKET to state [27]
transition on WhileStatement to state [26]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on PRINTLN to state [20]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [19]
transition on StatementList to state [34]
transition on WHILE to state [18]

-------------------
lalr_state [28]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement (*) RIGHTCURLYBRACKET RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on RIGHTCURLYBRACKET to state [32]

-------------------
lalr_state [29]: {
  [Statement ::= PrintStatement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [30]: {
  [Statement ::= AssignStatement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [31]: {
  [Statement ::= ArrayAssignStatement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [32]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET (*) RIGHTCURLYBRACKET , {EOF CLASS }]
}
transition on RIGHTCURLYBRACKET to state [33]

-------------------
lalr_state [33]: {
  [MainClass ::= CLASS Identifier LEFTCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LEFTBRACKET RIGHTBRACKET Identifier RPAREN LEFTCURLYBRACKET Statement RIGHTCURLYBRACKET RIGHTCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [34]: {
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= LEFTCURLYBRACKET StatementList (*) RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on Statement to state [37]
transition on LEFTCURLYBRACKET to state [27]
transition on WhileStatement to state [26]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on RIGHTCURLYBRACKET to state [36]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [35]: {
  [StatementList ::= Statement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [36]: {
  [BlockStatement ::= LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [37]: {
  [StatementList ::= StatementList Statement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [38]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [IfStatement ::= IF LPAREN (*) Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [41]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [39]: {
  [Expression ::= NEW (*) INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [Expression ::= NEW (*) Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on INT to state [75]
transition on Identifier to state [74]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [40]: {
  [Expression ::= TRUE (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [41]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [IfStatement ::= IF LPAREN Expression (*) RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on RPAREN to state [72]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [42]: {
  [Expression ::= FALSE (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [43]: {
  [Expression ::= THIS (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [44]: {
  [Expression ::= IDENTIFIER (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [45]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= NOT (*) Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [71]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [46]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= LPAREN (*) Expression RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [48]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [47]: {
  [Expression ::= INTEGER_LITERAL (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [48]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= LPAREN Expression (*) RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on RPAREN to state [51]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [49]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression LEFTANGLEBRACKET (*) Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [70]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [50]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression LEFTBRACKET (*) Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [68]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [51]: {
  [Expression ::= LPAREN Expression RPAREN (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [52]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression AND (*) Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [67]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [53]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression PLUS (*) Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [66]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [54]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression MINUS (*) Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [65]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [55]: {
  [Expression ::= Expression PERIOD (*) LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression PERIOD (*) Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression PERIOD (*) Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
}
transition on Identifier to state [57]
transition on IDENTIFIER to state [4]
transition on LENGTH to state [56]

-------------------
lalr_state [56]: {
  [Expression ::= Expression PERIOD LENGTH (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [57]: {
  [Expression ::= Expression PERIOD Identifier (*) LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression PERIOD Identifier (*) LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on LPAREN to state [58]

-------------------
lalr_state [58]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [ExpressionListDef ::= (*) ExpressionListDef COMMA Expression , {RPAREN COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression PERIOD Identifier LPAREN (*) ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [ExpressionListDef ::= (*) Expression , {RPAREN COMMA }]
  [Expression ::= Expression PERIOD Identifier LPAREN (*) RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on ExpressionListDef to state [61]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on RPAREN to state [60]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [59]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [59]: {
  [ExpressionListDef ::= Expression (*) , {RPAREN COMMA }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [60]: {
  [Expression ::= Expression PERIOD Identifier LPAREN RPAREN (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [61]: {
  [ExpressionListDef ::= ExpressionListDef (*) COMMA Expression , {RPAREN COMMA }]
  [Expression ::= Expression PERIOD Identifier LPAREN ExpressionListDef (*) RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on RPAREN to state [63]
transition on COMMA to state [62]

-------------------
lalr_state [62]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [ExpressionListDef ::= ExpressionListDef COMMA (*) Expression , {RPAREN COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [64]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [63]: {
  [Expression ::= Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [64]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [ExpressionListDef ::= ExpressionListDef COMMA Expression (*) , {RPAREN COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [65]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression MINUS Expression (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [66]: {
  [Expression ::= Expression PLUS Expression (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [67]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression AND Expression (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [68]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression LEFTBRACKET Expression (*) RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on RIGHTBRACKET to state [69]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [69]: {
  [Expression ::= Expression LEFTBRACKET Expression RIGHTBRACKET (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [70]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression LEFTANGLEBRACKET Expression (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [71]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= NOT Expression (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [72]: {
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= IF LPAREN Expression RPAREN (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on Statement to state [73]
transition on LEFTCURLYBRACKET to state [27]
transition on WhileStatement to state [26]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [73]: {
  [IfStatement ::= IF LPAREN Expression RPAREN Statement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [74]: {
  [Expression ::= NEW Identifier (*) LPAREN RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on LPAREN to state [79]

-------------------
lalr_state [75]: {
  [Expression ::= NEW INT (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on LEFTBRACKET to state [76]

-------------------
lalr_state [76]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= NEW INT LEFTBRACKET (*) Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [77]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [77]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= NEW INT LEFTBRACKET Expression (*) RIGHTBRACKET , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on RIGHTBRACKET to state [78]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [78]: {
  [Expression ::= NEW INT LEFTBRACKET Expression RIGHTBRACKET (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [79]: {
  [Expression ::= NEW Identifier LPAREN (*) RPAREN , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}
transition on RPAREN to state [80]

-------------------
lalr_state [80]: {
  [Expression ::= NEW Identifier LPAREN RPAREN (*) , {PLUS MINUS AND RPAREN SEMICOLON LEFTBRACKET RIGHTBRACKET COMMA LEFTANGLEBRACKET PERIOD }]
}

-------------------
lalr_state [81]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [ArrayAssignStatement ::= Identifier LEFTBRACKET (*) Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [85]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [82]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [AssignStatement ::= Identifier BECOMES (*) Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [83]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [83]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [AssignStatement ::= Identifier BECOMES Expression (*) SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on SEMICOLON to state [84]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [84]: {
  [AssignStatement ::= Identifier BECOMES Expression SEMICOLON (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [85]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [ArrayAssignStatement ::= Identifier LEFTBRACKET Expression (*) RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LEFTBRACKET RIGHTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on RIGHTBRACKET to state [86]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [86]: {
  [ArrayAssignStatement ::= Identifier LEFTBRACKET Expression RIGHTBRACKET (*) BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on BECOMES to state [87]

-------------------
lalr_state [87]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [ArrayAssignStatement ::= Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES (*) Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [88]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [88]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [ArrayAssignStatement ::= Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression (*) SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on SEMICOLON to state [89]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [89]: {
  [ArrayAssignStatement ::= Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [90]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [PrintStatement ::= PRINTLN LPAREN (*) Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [91]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [91]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [PrintStatement ::= PRINTLN LPAREN Expression (*) RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on RPAREN to state [92]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [92]: {
  [PrintStatement ::= PRINTLN LPAREN Expression RPAREN (*) SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on SEMICOLON to state [93]

-------------------
lalr_state [93]: {
  [PrintStatement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [94]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [DisplayStatement ::= DISPLAY Expression (*) SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on SEMICOLON to state [95]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [95]: {
  [DisplayStatement ::= DISPLAY Expression SEMICOLON (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [96]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [WhileStatement ::= WHILE LPAREN (*) Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [97]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [97]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [WhileStatement ::= WHILE LPAREN Expression (*) RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND RPAREN LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on RPAREN to state [98]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [98]: {
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= WHILE LPAREN Expression RPAREN (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on Statement to state [99]
transition on LEFTCURLYBRACKET to state [27]
transition on WhileStatement to state [26]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [99]: {
  [WhileStatement ::= WHILE LPAREN Expression RPAREN Statement (*) , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [100]: {
  [ClassDeclListDef ::= ClassDeclarations (*) , {EOF COMMA }]
}

-------------------
lalr_state [101]: {
  [ClassDeclarations ::= CLASS (*) Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS (*) Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS (*) Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS (*) Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS (*) Identifier EXTENDS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS (*) Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS (*) Identifier EXTENDS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS (*) Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [Identifier ::= (*) IDENTIFIER , {EXTENDS LEFTCURLYBRACKET }]
}
transition on Identifier to state [105]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [102]: {
  [ClassDeclListDef ::= ClassDeclListDef (*) COMMA ClassDeclarations , {EOF COMMA }]
  [Program ::= MainClass ClassDeclListDef (*) , {EOF }]
}
transition on COMMA to state [103]

-------------------
lalr_state [103]: {
  [ClassDeclarations ::= (*) CLASS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclListDef ::= ClassDeclListDef COMMA (*) ClassDeclarations , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= (*) CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
}
transition on CLASS to state [101]
transition on ClassDeclarations to state [104]

-------------------
lalr_state [104]: {
  [ClassDeclListDef ::= ClassDeclListDef COMMA ClassDeclarations (*) , {EOF COMMA }]
}

-------------------
lalr_state [105]: {
  [ClassDeclarations ::= CLASS Identifier (*) LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier (*) LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier (*) EXTENDS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier (*) LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier (*) EXTENDS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier (*) EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier (*) LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier (*) EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
}
transition on EXTENDS to state [107]
transition on LEFTCURLYBRACKET to state [106]

-------------------
lalr_state [106]: {
  [MethodListDeclarationsDef ::= (*) MethodListDeclarationsDef COMMA MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [VarDeclarationListDef ::= (*) VarDeclarationListDef VarDeclaration , {PUBLIC INT RIGHTCURLYBRACKET }]
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET (*) RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET (*) MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [VarDeclaration ::= (*) Type Identifier SEMICOLON , {PUBLIC INT RIGHTCURLYBRACKET }]
  [MethodListDeclarationsDef ::= (*) MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [VarDeclarationListDef ::= (*) VarDeclaration , {PUBLIC INT RIGHTCURLYBRACKET }]
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET (*) VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET (*) VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
}
transition on INT to state [117]
transition on PUBLIC to state [116]
transition on RIGHTCURLYBRACKET to state [188]
transition on VarDeclaration to state [114]
transition on VarDeclarationListDef to state [187]
transition on MethodListDeclarationsDef to state [186]
transition on Type to state [111]
transition on MethodDeclarations to state [110]

-------------------
lalr_state [107]: {
  [ClassDeclarations ::= CLASS Identifier EXTENDS (*) Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS (*) Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS (*) Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS (*) Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [Identifier ::= (*) IDENTIFIER , {LEFTCURLYBRACKET }]
}
transition on Identifier to state [108]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [108]: {
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier (*) LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier (*) LEFTCURLYBRACKET RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier (*) LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier (*) LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
}
transition on LEFTCURLYBRACKET to state [109]

-------------------
lalr_state [109]: {
  [MethodListDeclarationsDef ::= (*) MethodListDeclarationsDef COMMA MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [VarDeclarationListDef ::= (*) VarDeclarationListDef VarDeclaration , {PUBLIC INT RIGHTCURLYBRACKET }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET (*) VarDeclarationListDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET (*) VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [VarDeclaration ::= (*) Type Identifier SEMICOLON , {PUBLIC INT RIGHTCURLYBRACKET }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET (*) RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodListDeclarationsDef ::= (*) MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [VarDeclarationListDef ::= (*) VarDeclaration , {PUBLIC INT RIGHTCURLYBRACKET }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET (*) MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on INT to state [117]
transition on PUBLIC to state [116]
transition on RIGHTCURLYBRACKET to state [115]
transition on VarDeclaration to state [114]
transition on VarDeclarationListDef to state [113]
transition on MethodListDeclarationsDef to state [112]
transition on Type to state [111]
transition on MethodDeclarations to state [110]

-------------------
lalr_state [110]: {
  [MethodListDeclarationsDef ::= MethodDeclarations (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [111]: {
  [VarDeclaration ::= Type (*) Identifier SEMICOLON , {DISPLAY PUBLIC IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {SEMICOLON }]
}
transition on Identifier to state [184]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [112]: {
  [MethodListDeclarationsDef ::= MethodListDeclarationsDef (*) COMMA MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef (*) RIGHTCURLYBRACKET , {EOF COMMA }]
}
transition on RIGHTCURLYBRACKET to state [183]
transition on COMMA to state [180]

-------------------
lalr_state [113]: {
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodListDeclarationsDef ::= (*) MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [VarDeclarationListDef ::= VarDeclarationListDef (*) VarDeclaration , {PUBLIC INT RIGHTCURLYBRACKET }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef (*) MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodListDeclarationsDef ::= (*) MethodListDeclarationsDef COMMA MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef (*) RIGHTCURLYBRACKET , {EOF COMMA }]
  [VarDeclaration ::= (*) Type Identifier SEMICOLON , {PUBLIC INT RIGHTCURLYBRACKET }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on INT to state [117]
transition on PUBLIC to state [116]
transition on RIGHTCURLYBRACKET to state [179]
transition on VarDeclaration to state [144]
transition on MethodListDeclarationsDef to state [178]
transition on Type to state [111]
transition on MethodDeclarations to state [110]

-------------------
lalr_state [114]: {
  [VarDeclarationListDef ::= VarDeclaration (*) , {DISPLAY PUBLIC IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [115]: {
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET (*) , {EOF COMMA }]
}

-------------------
lalr_state [116]: {
  [MethodDeclarations ::= PUBLIC (*) Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC (*) Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC (*) Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC (*) Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC (*) Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC (*) Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC (*) Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC (*) Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on INT to state [117]
transition on Type to state [126]

-------------------
lalr_state [117]: {
  [Type ::= INT (*) LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
}
transition on LEFTBRACKET to state [118]

-------------------
lalr_state [118]: {
  [Type ::= INT LEFTBRACKET (*) RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
}
transition on RIGHTBRACKET to state [119]

-------------------
lalr_state [119]: {
  [NT$0 ::= (*) , {BOOLEAN }]
  [Type ::= INT LEFTBRACKET RIGHTBRACKET (*) NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
}
transition on NT$0 to state [120]

-------------------
lalr_state [120]: {
  [Type ::= INT LEFTBRACKET RIGHTBRACKET NT$0 (*) BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
}
transition on BOOLEAN to state [121]

-------------------
lalr_state [121]: {
  [Type ::= INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN (*) NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [NT$1 ::= (*) , {INT }]
}
transition on NT$1 to state [122]

-------------------
lalr_state [122]: {
  [Type ::= INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 (*) INT NT$2 IDENTIFIER , {IDENTIFIER }]
}
transition on INT to state [123]

-------------------
lalr_state [123]: {
  [NT$2 ::= (*) , {IDENTIFIER }]
  [Type ::= INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT (*) NT$2 IDENTIFIER , {IDENTIFIER }]
}
transition on NT$2 to state [124]

-------------------
lalr_state [124]: {
  [Type ::= INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 (*) IDENTIFIER , {IDENTIFIER }]
}
transition on IDENTIFIER to state [125]

-------------------
lalr_state [125]: {
  [Type ::= INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER (*) , {IDENTIFIER }]
}

-------------------
lalr_state [126]: {
  [MethodDeclarations ::= PUBLIC Type (*) Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type (*) Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type (*) Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type (*) Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type (*) Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type (*) Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type (*) Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [MethodDeclarations ::= PUBLIC Type (*) Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on Identifier to state [127]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [127]: {
  [MethodDeclarations ::= PUBLIC Type Identifier (*) LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier (*) LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier (*) LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier (*) LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier (*) LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier (*) LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier (*) LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier (*) LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on LPAREN to state [128]

-------------------
lalr_state [128]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN (*) RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN (*) FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [FormalListDef ::= (*) FormalListDef COMMA Formal , {RPAREN COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN (*) FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN (*) RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN (*) FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [FormalListDef ::= (*) Formal , {RPAREN COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN (*) RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN (*) RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN (*) FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on INT to state [117]
transition on FormalListDef to state [132]
transition on RPAREN to state [131]
transition on Formal to state [130]
transition on Type to state [129]

-------------------
lalr_state [129]: {
  [Formal ::= Type (*) Identifier , {RPAREN COMMA }]
  [Identifier ::= (*) IDENTIFIER , {RPAREN COMMA }]
}
transition on Identifier to state [177]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [130]: {
  [FormalListDef ::= Formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [131]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN (*) LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN (*) LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN (*) LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN (*) LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on LEFTCURLYBRACKET to state [157]

-------------------
lalr_state [132]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef (*) RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef (*) RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef (*) RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [FormalListDef ::= FormalListDef (*) COMMA Formal , {RPAREN COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef (*) RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on RPAREN to state [134]
transition on COMMA to state [133]

-------------------
lalr_state [133]: {
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [FormalListDef ::= FormalListDef COMMA (*) Formal , {RPAREN COMMA }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
}
transition on INT to state [117]
transition on Type to state [129]
transition on Formal to state [156]

-------------------
lalr_state [134]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN (*) LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN (*) LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN (*) LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN (*) LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on LEFTCURLYBRACKET to state [135]

-------------------
lalr_state [135]: {
  [VarDeclarationListDef ::= (*) VarDeclarationListDef VarDeclaration , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET (*) StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET (*) VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [VarDeclaration ::= (*) Type Identifier SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET (*) RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [VarDeclarationListDef ::= (*) VarDeclaration , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET (*) VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on BlockStatement to state [22]
transition on StatementList to state [138]
transition on LEFTCURLYBRACKET to state [27]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [19]
transition on Statement to state [35]
transition on VarDeclarationListDef to state [137]
transition on PRINTLN to state [20]
transition on VarDeclaration to state [114]
transition on Identifier to state [23]
transition on AssignStatement to state [30]
transition on WhileStatement to state [26]
transition on Type to state [111]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on RETURN to state [136]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on WHILE to state [18]
transition on INT to state [117]

-------------------
lalr_state [136]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN (*) Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [153]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [137]: {
  [VarDeclarationListDef ::= VarDeclarationListDef (*) VarDeclaration , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef (*) StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [VarDeclaration ::= (*) Type Identifier SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef (*) RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on BlockStatement to state [22]
transition on StatementList to state [145]
transition on LEFTCURLYBRACKET to state [27]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [19]
transition on Statement to state [35]
transition on PRINTLN to state [20]
transition on VarDeclaration to state [144]
transition on Identifier to state [23]
transition on AssignStatement to state [30]
transition on WhileStatement to state [26]
transition on Type to state [111]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on IDENTIFIER to state [4]
transition on RETURN to state [143]
transition on PrintStatement to state [29]
transition on WHILE to state [18]
transition on INT to state [117]

-------------------
lalr_state [138]: {
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList (*) RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on RETURN to state [139]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on Statement to state [37]
transition on LEFTCURLYBRACKET to state [27]
transition on WhileStatement to state [26]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [139]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN (*) Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [140]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [140]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression (*) SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on SEMICOLON to state [141]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [141]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON (*) RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on RIGHTCURLYBRACKET to state [142]

-------------------
lalr_state [142]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [143]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN (*) Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [150]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [144]: {
  [VarDeclarationListDef ::= VarDeclarationListDef VarDeclaration (*) , {DISPLAY PUBLIC IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [145]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList (*) RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on RETURN to state [146]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on Statement to state [37]
transition on LEFTCURLYBRACKET to state [27]
transition on WhileStatement to state [26]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [146]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN (*) Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [147]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [147]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression (*) SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on SEMICOLON to state [148]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [148]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON (*) RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on RIGHTCURLYBRACKET to state [149]

-------------------
lalr_state [149]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [150]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression (*) SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on SEMICOLON to state [151]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [151]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON (*) RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on RIGHTCURLYBRACKET to state [152]

-------------------
lalr_state [152]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [153]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression (*) SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on SEMICOLON to state [154]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [154]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON (*) RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on RIGHTCURLYBRACKET to state [155]

-------------------
lalr_state [155]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [156]: {
  [FormalListDef ::= FormalListDef COMMA Formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [157]: {
  [VarDeclarationListDef ::= (*) VarDeclarationListDef VarDeclaration , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET (*) RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET (*) VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [VarDeclaration ::= (*) Type Identifier SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [VarDeclarationListDef ::= (*) VarDeclaration , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET (*) StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET (*) VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on BlockStatement to state [22]
transition on StatementList to state [160]
transition on LEFTCURLYBRACKET to state [27]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [19]
transition on Statement to state [35]
transition on VarDeclarationListDef to state [159]
transition on PRINTLN to state [20]
transition on VarDeclaration to state [114]
transition on Identifier to state [23]
transition on AssignStatement to state [30]
transition on WhileStatement to state [26]
transition on Type to state [111]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on RETURN to state [158]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on WHILE to state [18]
transition on INT to state [117]

-------------------
lalr_state [158]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN (*) Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [174]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [159]: {
  [VarDeclarationListDef ::= VarDeclarationListDef (*) VarDeclaration , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef (*) RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [VarDeclaration ::= (*) Type Identifier SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef (*) StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on BlockStatement to state [22]
transition on StatementList to state [166]
transition on LEFTCURLYBRACKET to state [27]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [19]
transition on Statement to state [35]
transition on PRINTLN to state [20]
transition on VarDeclaration to state [144]
transition on Identifier to state [23]
transition on AssignStatement to state [30]
transition on WhileStatement to state [26]
transition on Type to state [111]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on IDENTIFIER to state [4]
transition on RETURN to state [165]
transition on PrintStatement to state [29]
transition on WHILE to state [18]
transition on INT to state [117]

-------------------
lalr_state [160]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList (*) RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on RETURN to state [161]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on Statement to state [37]
transition on LEFTCURLYBRACKET to state [27]
transition on WhileStatement to state [26]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [161]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN (*) Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [162]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [162]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression (*) SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on SEMICOLON to state [163]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [163]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON (*) RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on RIGHTCURLYBRACKET to state [164]

-------------------
lalr_state [164]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [165]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN (*) Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [171]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [166]: {
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LEFTBRACKET Expression RIGHTBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList (*) RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LEFTCURLYBRACKET StatementList RIGHTCURLYBRACKET , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN PRINTLN LEFTCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LEFTBRACKET }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on RETURN to state [167]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on Statement to state [37]
transition on LEFTCURLYBRACKET to state [27]
transition on WhileStatement to state [26]
transition on IF to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [167]: {
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN (*) Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [168]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [168]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression (*) SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on SEMICOLON to state [169]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [169]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON (*) RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on RIGHTCURLYBRACKET to state [170]

-------------------
lalr_state [170]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [171]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression (*) SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on SEMICOLON to state [172]
transition on LEFTBRACKET to state [50]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [172]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON (*) RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on RIGHTCURLYBRACKET to state [173]

-------------------
lalr_state [173]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [174]: {
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTBRACKET Expression RIGHTBRACKET , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) LEFTANGLEBRACKET Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression (*) SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionListDef RPAREN , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND SEMICOLON LEFTBRACKET LEFTANGLEBRACKET PERIOD }]
}
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on LEFTBRACKET to state [50]
transition on SEMICOLON to state [175]
transition on LEFTANGLEBRACKET to state [49]

-------------------
lalr_state [175]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON (*) RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on RIGHTCURLYBRACKET to state [176]

-------------------
lalr_state [176]: {
  [MethodDeclarations ::= PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [177]: {
  [Formal ::= Type Identifier (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [178]: {
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef (*) RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodListDeclarationsDef ::= MethodListDeclarationsDef (*) COMMA MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
}
transition on RIGHTCURLYBRACKET to state [181]
transition on COMMA to state [180]

-------------------
lalr_state [179]: {
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET (*) , {EOF COMMA }]
}

-------------------
lalr_state [180]: {
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodListDeclarationsDef ::= MethodListDeclarationsDef COMMA (*) MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on PUBLIC to state [116]
transition on MethodDeclarations to state [182]

-------------------
lalr_state [181]: {
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET (*) , {EOF COMMA }]
}

-------------------
lalr_state [182]: {
  [MethodListDeclarationsDef ::= MethodListDeclarationsDef COMMA MethodDeclarations (*) , {RIGHTCURLYBRACKET COMMA }]
}

-------------------
lalr_state [183]: {
  [ClassDeclarations ::= CLASS Identifier EXTENDS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET (*) , {EOF COMMA }]
}

-------------------
lalr_state [184]: {
  [VarDeclaration ::= Type Identifier (*) SEMICOLON , {DISPLAY PUBLIC IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}
transition on SEMICOLON to state [185]

-------------------
lalr_state [185]: {
  [VarDeclaration ::= Type Identifier SEMICOLON (*) , {DISPLAY PUBLIC IF WHILE RETURN PRINTLN INT LEFTCURLYBRACKET RIGHTCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [186]: {
  [MethodListDeclarationsDef ::= MethodListDeclarationsDef (*) COMMA MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef (*) RIGHTCURLYBRACKET , {EOF COMMA }]
}
transition on RIGHTCURLYBRACKET to state [192]
transition on COMMA to state [180]

-------------------
lalr_state [187]: {
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodListDeclarationsDef ::= (*) MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [VarDeclarationListDef ::= VarDeclarationListDef (*) VarDeclaration , {PUBLIC INT RIGHTCURLYBRACKET }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef (*) MethodListDeclarationsDef RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET VarDeclarationListDef StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [Type ::= (*) INT LEFTBRACKET RIGHTBRACKET NT$0 BOOLEAN NT$1 INT NT$2 IDENTIFIER , {IDENTIFIER }]
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef (*) RIGHTCURLYBRACKET , {EOF COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET VarDeclarationListDef RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN FormalListDef RPAREN LEFTCURLYBRACKET StatementList RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
  [MethodListDeclarationsDef ::= (*) MethodListDeclarationsDef COMMA MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [VarDeclaration ::= (*) Type Identifier SEMICOLON , {PUBLIC INT RIGHTCURLYBRACKET }]
  [MethodDeclarations ::= (*) PUBLIC Type Identifier LPAREN RPAREN LEFTCURLYBRACKET RETURN Expression SEMICOLON RIGHTCURLYBRACKET , {RIGHTCURLYBRACKET COMMA }]
}
transition on INT to state [117]
transition on PUBLIC to state [116]
transition on RIGHTCURLYBRACKET to state [190]
transition on VarDeclaration to state [144]
transition on MethodListDeclarationsDef to state [189]
transition on Type to state [111]
transition on MethodDeclarations to state [110]

-------------------
lalr_state [188]: {
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET RIGHTCURLYBRACKET (*) , {EOF COMMA }]
}

-------------------
lalr_state [189]: {
  [MethodListDeclarationsDef ::= MethodListDeclarationsDef (*) COMMA MethodDeclarations , {RIGHTCURLYBRACKET COMMA }]
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef (*) RIGHTCURLYBRACKET , {EOF COMMA }]
}
transition on RIGHTCURLYBRACKET to state [191]
transition on COMMA to state [180]

-------------------
lalr_state [190]: {
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef RIGHTCURLYBRACKET (*) , {EOF COMMA }]
}

-------------------
lalr_state [191]: {
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET VarDeclarationListDef MethodListDeclarationsDef RIGHTCURLYBRACKET (*) , {EOF COMMA }]
}

-------------------
lalr_state [192]: {
  [ClassDeclarations ::= CLASS Identifier LEFTCURLYBRACKET MethodListDeclarationsDef RIGHTCURLYBRACKET (*) , {EOF COMMA }]
}

-------------------
lalr_state [193]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 7:SHIFT(to state 3)]
From state #1
 [term 0:SHIFT(to state 193)]
From state #2
 [term 0:REDUCE(with prod 2)] [term 7:SHIFT(to state 101)]
From state #3
 [term 39:SHIFT(to state 4)]
From state #4
 [term 21:REDUCE(with prod 69)] [term 25:REDUCE(with prod 69)]
 [term 28:REDUCE(with prod 69)] [term 29:REDUCE(with prod 69)]
 [term 30:REDUCE(with prod 69)] [term 31:REDUCE(with prod 69)]
 [term 33:REDUCE(with prod 69)] [term 35:REDUCE(with prod 69)]
From state #5
 [term 31:SHIFT(to state 6)]
From state #6
 [term 6:SHIFT(to state 7)]
From state #7
 [term 3:SHIFT(to state 8)]
From state #8
 [term 4:SHIFT(to state 9)]
From state #9
 [term 5:SHIFT(to state 10)]
From state #10
 [term 28:SHIFT(to state 11)]
From state #11
 [term 16:SHIFT(to state 12)]
From state #12
 [term 33:SHIFT(to state 13)]
From state #13
 [term 34:SHIFT(to state 14)]
From state #14
 [term 39:SHIFT(to state 4)]
From state #15
 [term 29:SHIFT(to state 16)]
From state #16
 [term 31:SHIFT(to state 17)]
From state #17
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 17:SHIFT(to state 20)]
 [term 31:SHIFT(to state 27)] [term 39:SHIFT(to state 4)]
From state #18
 [term 28:SHIFT(to state 96)]
From state #19
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #20
 [term 28:SHIFT(to state 90)]
From state #21
 [term 2:REDUCE(with prod 42)] [term 8:REDUCE(with prod 42)]
 [term 10:REDUCE(with prod 42)] [term 12:REDUCE(with prod 42)]
 [term 17:REDUCE(with prod 42)] [term 31:REDUCE(with prod 42)]
 [term 32:REDUCE(with prod 42)] [term 39:REDUCE(with prod 42)]
From state #22
 [term 2:REDUCE(with prod 37)] [term 8:REDUCE(with prod 37)]
 [term 10:REDUCE(with prod 37)] [term 12:REDUCE(with prod 37)]
 [term 17:REDUCE(with prod 37)] [term 31:REDUCE(with prod 37)]
 [term 32:REDUCE(with prod 37)] [term 39:REDUCE(with prod 37)]
From state #23
 [term 25:SHIFT(to state 82)] [term 33:SHIFT(to state 81)]
From state #24
 [term 2:REDUCE(with prod 39)] [term 8:REDUCE(with prod 39)]
 [term 10:REDUCE(with prod 39)] [term 12:REDUCE(with prod 39)]
 [term 17:REDUCE(with prod 39)] [term 31:REDUCE(with prod 39)]
 [term 32:REDUCE(with prod 39)] [term 39:REDUCE(with prod 39)]
From state #25
 [term 28:SHIFT(to state 38)]
From state #26
 [term 2:REDUCE(with prod 40)] [term 8:REDUCE(with prod 40)]
 [term 10:REDUCE(with prod 40)] [term 12:REDUCE(with prod 40)]
 [term 17:REDUCE(with prod 40)] [term 31:REDUCE(with prod 40)]
 [term 32:REDUCE(with prod 40)] [term 39:REDUCE(with prod 40)]
From state #27
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 17:SHIFT(to state 20)]
 [term 31:SHIFT(to state 27)] [term 39:SHIFT(to state 4)]
From state #28
 [term 32:SHIFT(to state 32)]
From state #29
 [term 2:REDUCE(with prod 38)] [term 8:REDUCE(with prod 38)]
 [term 10:REDUCE(with prod 38)] [term 12:REDUCE(with prod 38)]
 [term 17:REDUCE(with prod 38)] [term 31:REDUCE(with prod 38)]
 [term 32:REDUCE(with prod 38)] [term 39:REDUCE(with prod 38)]
From state #30
 [term 2:REDUCE(with prod 36)] [term 8:REDUCE(with prod 36)]
 [term 10:REDUCE(with prod 36)] [term 12:REDUCE(with prod 36)]
 [term 17:REDUCE(with prod 36)] [term 31:REDUCE(with prod 36)]
 [term 32:REDUCE(with prod 36)] [term 39:REDUCE(with prod 36)]
From state #31
 [term 2:REDUCE(with prod 41)] [term 8:REDUCE(with prod 41)]
 [term 10:REDUCE(with prod 41)] [term 12:REDUCE(with prod 41)]
 [term 17:REDUCE(with prod 41)] [term 31:REDUCE(with prod 41)]
 [term 32:REDUCE(with prod 41)] [term 39:REDUCE(with prod 41)]
From state #32
 [term 32:SHIFT(to state 33)]
From state #33
 [term 0:REDUCE(with prod 3)] [term 7:REDUCE(with prod 3)]
From state #34
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 17:SHIFT(to state 20)]
 [term 31:SHIFT(to state 27)] [term 32:SHIFT(to state 36)]
 [term 39:SHIFT(to state 4)]
From state #35
 [term 2:REDUCE(with prod 43)] [term 8:REDUCE(with prod 43)]
 [term 10:REDUCE(with prod 43)] [term 12:REDUCE(with prod 43)]
 [term 17:REDUCE(with prod 43)] [term 31:REDUCE(with prod 43)]
 [term 32:REDUCE(with prod 43)] [term 39:REDUCE(with prod 43)]
From state #36
 [term 2:REDUCE(with prod 49)] [term 8:REDUCE(with prod 49)]
 [term 10:REDUCE(with prod 49)] [term 12:REDUCE(with prod 49)]
 [term 17:REDUCE(with prod 49)] [term 31:REDUCE(with prod 49)]
 [term 32:REDUCE(with prod 49)] [term 39:REDUCE(with prod 49)]
From state #37
 [term 2:REDUCE(with prod 44)] [term 8:REDUCE(with prod 44)]
 [term 10:REDUCE(with prod 44)] [term 12:REDUCE(with prod 44)]
 [term 17:REDUCE(with prod 44)] [term 31:REDUCE(with prod 44)]
 [term 32:REDUCE(with prod 44)] [term 39:REDUCE(with prod 44)]
From state #38
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #39
 [term 18:SHIFT(to state 75)] [term 39:SHIFT(to state 4)]
From state #40
 [term 22:REDUCE(with prod 61)] [term 23:REDUCE(with prod 61)]
 [term 26:REDUCE(with prod 61)] [term 29:REDUCE(with prod 61)]
 [term 30:REDUCE(with prod 61)] [term 33:REDUCE(with prod 61)]
 [term 34:REDUCE(with prod 61)] [term 35:REDUCE(with prod 61)]
 [term 37:REDUCE(with prod 61)] [term 38:REDUCE(with prod 61)]
From state #41
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 29:SHIFT(to state 72)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #42
 [term 22:REDUCE(with prod 62)] [term 23:REDUCE(with prod 62)]
 [term 26:REDUCE(with prod 62)] [term 29:REDUCE(with prod 62)]
 [term 30:REDUCE(with prod 62)] [term 33:REDUCE(with prod 62)]
 [term 34:REDUCE(with prod 62)] [term 35:REDUCE(with prod 62)]
 [term 37:REDUCE(with prod 62)] [term 38:REDUCE(with prod 62)]
From state #43
 [term 22:REDUCE(with prod 64)] [term 23:REDUCE(with prod 64)]
 [term 26:REDUCE(with prod 64)] [term 29:REDUCE(with prod 64)]
 [term 30:REDUCE(with prod 64)] [term 33:REDUCE(with prod 64)]
 [term 34:REDUCE(with prod 64)] [term 35:REDUCE(with prod 64)]
 [term 37:REDUCE(with prod 64)] [term 38:REDUCE(with prod 64)]
From state #44
 [term 22:REDUCE(with prod 63)] [term 23:REDUCE(with prod 63)]
 [term 26:REDUCE(with prod 63)] [term 29:REDUCE(with prod 63)]
 [term 30:REDUCE(with prod 63)] [term 33:REDUCE(with prod 63)]
 [term 34:REDUCE(with prod 63)] [term 35:REDUCE(with prod 63)]
 [term 37:REDUCE(with prod 63)] [term 38:REDUCE(with prod 63)]
From state #45
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #46
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #47
 [term 22:REDUCE(with prod 60)] [term 23:REDUCE(with prod 60)]
 [term 26:REDUCE(with prod 60)] [term 29:REDUCE(with prod 60)]
 [term 30:REDUCE(with prod 60)] [term 33:REDUCE(with prod 60)]
 [term 34:REDUCE(with prod 60)] [term 35:REDUCE(with prod 60)]
 [term 37:REDUCE(with prod 60)] [term 38:REDUCE(with prod 60)]
From state #48
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 29:SHIFT(to state 51)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #49
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #50
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #51
 [term 22:REDUCE(with prod 68)] [term 23:REDUCE(with prod 68)]
 [term 26:REDUCE(with prod 68)] [term 29:REDUCE(with prod 68)]
 [term 30:REDUCE(with prod 68)] [term 33:REDUCE(with prod 68)]
 [term 34:REDUCE(with prod 68)] [term 35:REDUCE(with prod 68)]
 [term 37:REDUCE(with prod 68)] [term 38:REDUCE(with prod 68)]
From state #52
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #53
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #54
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #55
 [term 20:SHIFT(to state 56)] [term 39:SHIFT(to state 4)]
From state #56
 [term 22:REDUCE(with prod 57)] [term 23:REDUCE(with prod 57)]
 [term 26:REDUCE(with prod 57)] [term 29:REDUCE(with prod 57)]
 [term 30:REDUCE(with prod 57)] [term 33:REDUCE(with prod 57)]
 [term 34:REDUCE(with prod 57)] [term 35:REDUCE(with prod 57)]
 [term 37:REDUCE(with prod 57)] [term 38:REDUCE(with prod 57)]
From state #57
 [term 28:SHIFT(to state 58)]
From state #58
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 29:SHIFT(to state 60)] [term 39:SHIFT(to state 44)]
 [term 40:SHIFT(to state 47)]
From state #59
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 29:REDUCE(with prod 34)]
 [term 33:SHIFT(to state 50)] [term 35:REDUCE(with prod 34)]
 [term 37:SHIFT(to state 49)] [term 38:SHIFT(to state 55)]
From state #60
 [term 22:REDUCE(with prod 59)] [term 23:REDUCE(with prod 59)]
 [term 26:REDUCE(with prod 59)] [term 29:REDUCE(with prod 59)]
 [term 30:REDUCE(with prod 59)] [term 33:REDUCE(with prod 59)]
 [term 34:REDUCE(with prod 59)] [term 35:REDUCE(with prod 59)]
 [term 37:REDUCE(with prod 59)] [term 38:REDUCE(with prod 59)]
From state #61
 [term 29:SHIFT(to state 63)] [term 35:SHIFT(to state 62)]
From state #62
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #63
 [term 22:REDUCE(with prod 58)] [term 23:REDUCE(with prod 58)]
 [term 26:REDUCE(with prod 58)] [term 29:REDUCE(with prod 58)]
 [term 30:REDUCE(with prod 58)] [term 33:REDUCE(with prod 58)]
 [term 34:REDUCE(with prod 58)] [term 35:REDUCE(with prod 58)]
 [term 37:REDUCE(with prod 58)] [term 38:REDUCE(with prod 58)]
From state #64
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 29:REDUCE(with prod 35)]
 [term 33:SHIFT(to state 50)] [term 35:REDUCE(with prod 35)]
 [term 37:SHIFT(to state 49)] [term 38:SHIFT(to state 55)]
From state #65
 [term 22:REDUCE(with prod 55)] [term 23:REDUCE(with prod 55)]
 [term 26:REDUCE(with prod 55)] [term 29:REDUCE(with prod 55)]
 [term 30:REDUCE(with prod 55)] [term 33:REDUCE(with prod 55)]
 [term 34:REDUCE(with prod 55)] [term 35:REDUCE(with prod 55)]
 [term 37:SHIFT(to state 49)] [term 38:SHIFT(to state 55)]
From state #66
 [term 22:REDUCE(with prod 54)] [term 23:REDUCE(with prod 54)]
 [term 26:REDUCE(with prod 54)] [term 29:REDUCE(with prod 54)]
 [term 30:REDUCE(with prod 54)] [term 33:REDUCE(with prod 54)]
 [term 34:REDUCE(with prod 54)] [term 35:REDUCE(with prod 54)]
 [term 37:SHIFT(to state 49)] [term 38:SHIFT(to state 55)]
From state #67
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:REDUCE(with prod 52)] [term 29:REDUCE(with prod 52)]
 [term 30:REDUCE(with prod 52)] [term 33:REDUCE(with prod 52)]
 [term 34:REDUCE(with prod 52)] [term 35:REDUCE(with prod 52)]
 [term 37:SHIFT(to state 49)] [term 38:SHIFT(to state 55)]
From state #68
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 33:SHIFT(to state 50)]
 [term 34:SHIFT(to state 69)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #69
 [term 22:REDUCE(with prod 56)] [term 23:REDUCE(with prod 56)]
 [term 26:REDUCE(with prod 56)] [term 29:REDUCE(with prod 56)]
 [term 30:REDUCE(with prod 56)] [term 33:REDUCE(with prod 56)]
 [term 34:REDUCE(with prod 56)] [term 35:REDUCE(with prod 56)]
 [term 37:REDUCE(with prod 56)] [term 38:REDUCE(with prod 56)]
From state #70
 [term 22:REDUCE(with prod 53)] [term 23:REDUCE(with prod 53)]
 [term 26:REDUCE(with prod 53)] [term 29:REDUCE(with prod 53)]
 [term 30:REDUCE(with prod 53)] [term 33:REDUCE(with prod 53)]
 [term 34:REDUCE(with prod 53)] [term 35:REDUCE(with prod 53)]
 [term 37:NONASSOC] [term 38:REDUCE(with prod 53)]
From state #71
 [term 22:REDUCE(with prod 67)] [term 23:REDUCE(with prod 67)]
 [term 26:REDUCE(with prod 67)] [term 29:REDUCE(with prod 67)]
 [term 30:REDUCE(with prod 67)] [term 33:REDUCE(with prod 67)]
 [term 34:REDUCE(with prod 67)] [term 35:REDUCE(with prod 67)]
 [term 37:SHIFT(to state 49)] [term 38:SHIFT(to state 55)]
From state #72
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 17:SHIFT(to state 20)]
 [term 31:SHIFT(to state 27)] [term 39:SHIFT(to state 4)]
From state #73
 [term 2:REDUCE(with prod 47)] [term 8:REDUCE(with prod 47)]
 [term 10:REDUCE(with prod 47)] [term 12:REDUCE(with prod 47)]
 [term 17:REDUCE(with prod 47)] [term 31:REDUCE(with prod 47)]
 [term 32:REDUCE(with prod 47)] [term 39:REDUCE(with prod 47)]
From state #74
 [term 28:SHIFT(to state 79)]
From state #75
 [term 33:SHIFT(to state 76)]
From state #76
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #77
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 33:SHIFT(to state 50)]
 [term 34:SHIFT(to state 78)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #78
 [term 22:REDUCE(with prod 65)] [term 23:REDUCE(with prod 65)]
 [term 26:REDUCE(with prod 65)] [term 29:REDUCE(with prod 65)]
 [term 30:REDUCE(with prod 65)] [term 33:REDUCE(with prod 65)]
 [term 34:REDUCE(with prod 65)] [term 35:REDUCE(with prod 65)]
 [term 37:REDUCE(with prod 65)] [term 38:REDUCE(with prod 65)]
From state #79
 [term 29:SHIFT(to state 80)]
From state #80
 [term 22:REDUCE(with prod 66)] [term 23:REDUCE(with prod 66)]
 [term 26:REDUCE(with prod 66)] [term 29:REDUCE(with prod 66)]
 [term 30:REDUCE(with prod 66)] [term 33:REDUCE(with prod 66)]
 [term 34:REDUCE(with prod 66)] [term 35:REDUCE(with prod 66)]
 [term 37:REDUCE(with prod 66)] [term 38:REDUCE(with prod 66)]
From state #81
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #82
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #83
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 84)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #84
 [term 2:REDUCE(with prod 45)] [term 8:REDUCE(with prod 45)]
 [term 10:REDUCE(with prod 45)] [term 12:REDUCE(with prod 45)]
 [term 17:REDUCE(with prod 45)] [term 31:REDUCE(with prod 45)]
 [term 32:REDUCE(with prod 45)] [term 39:REDUCE(with prod 45)]
From state #85
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 33:SHIFT(to state 50)]
 [term 34:SHIFT(to state 86)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #86
 [term 25:SHIFT(to state 87)]
From state #87
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #88
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 89)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #89
 [term 2:REDUCE(with prod 51)] [term 8:REDUCE(with prod 51)]
 [term 10:REDUCE(with prod 51)] [term 12:REDUCE(with prod 51)]
 [term 17:REDUCE(with prod 51)] [term 31:REDUCE(with prod 51)]
 [term 32:REDUCE(with prod 51)] [term 39:REDUCE(with prod 51)]
From state #90
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #91
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 29:SHIFT(to state 92)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #92
 [term 30:SHIFT(to state 93)]
From state #93
 [term 2:REDUCE(with prod 50)] [term 8:REDUCE(with prod 50)]
 [term 10:REDUCE(with prod 50)] [term 12:REDUCE(with prod 50)]
 [term 17:REDUCE(with prod 50)] [term 31:REDUCE(with prod 50)]
 [term 32:REDUCE(with prod 50)] [term 39:REDUCE(with prod 50)]
From state #94
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 95)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #95
 [term 2:REDUCE(with prod 46)] [term 8:REDUCE(with prod 46)]
 [term 10:REDUCE(with prod 46)] [term 12:REDUCE(with prod 46)]
 [term 17:REDUCE(with prod 46)] [term 31:REDUCE(with prod 46)]
 [term 32:REDUCE(with prod 46)] [term 39:REDUCE(with prod 46)]
From state #96
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #97
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 29:SHIFT(to state 98)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #98
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 17:SHIFT(to state 20)]
 [term 31:SHIFT(to state 27)] [term 39:SHIFT(to state 4)]
From state #99
 [term 2:REDUCE(with prod 48)] [term 8:REDUCE(with prod 48)]
 [term 10:REDUCE(with prod 48)] [term 12:REDUCE(with prod 48)]
 [term 17:REDUCE(with prod 48)] [term 31:REDUCE(with prod 48)]
 [term 32:REDUCE(with prod 48)] [term 39:REDUCE(with prod 48)]
From state #100
 [term 0:REDUCE(with prod 4)] [term 35:REDUCE(with prod 4)]
From state #101
 [term 39:SHIFT(to state 4)]
From state #102
 [term 0:REDUCE(with prod 0)] [term 35:SHIFT(to state 103)]
From state #103
 [term 7:SHIFT(to state 101)]
From state #104
 [term 0:REDUCE(with prod 5)] [term 35:REDUCE(with prod 5)]
From state #105
 [term 21:SHIFT(to state 107)] [term 31:SHIFT(to state 106)]
From state #106
 [term 6:SHIFT(to state 116)] [term 18:SHIFT(to state 117)]
 [term 32:SHIFT(to state 188)]
From state #107
 [term 39:SHIFT(to state 4)]
From state #108
 [term 31:SHIFT(to state 109)]
From state #109
 [term 6:SHIFT(to state 116)] [term 18:SHIFT(to state 117)]
 [term 32:SHIFT(to state 115)]
From state #110
 [term 32:REDUCE(with prod 14)] [term 35:REDUCE(with prod 14)]
From state #111
 [term 39:SHIFT(to state 4)]
From state #112
 [term 32:SHIFT(to state 183)] [term 35:SHIFT(to state 180)]
From state #113
 [term 6:SHIFT(to state 116)] [term 18:SHIFT(to state 117)]
 [term 32:SHIFT(to state 179)]
From state #114
 [term 2:REDUCE(with prod 24)] [term 6:REDUCE(with prod 24)]
 [term 8:REDUCE(with prod 24)] [term 10:REDUCE(with prod 24)]
 [term 12:REDUCE(with prod 24)] [term 17:REDUCE(with prod 24)]
 [term 18:REDUCE(with prod 24)] [term 31:REDUCE(with prod 24)]
 [term 32:REDUCE(with prod 24)] [term 39:REDUCE(with prod 24)]
From state #115
 [term 0:REDUCE(with prod 9)] [term 35:REDUCE(with prod 9)]
From state #116
 [term 18:SHIFT(to state 117)]
From state #117
 [term 33:SHIFT(to state 118)]
From state #118
 [term 34:SHIFT(to state 119)]
From state #119
 [term 19:REDUCE(with prod 30)]
From state #120
 [term 19:SHIFT(to state 121)]
From state #121
 [term 18:REDUCE(with prod 31)]
From state #122
 [term 18:SHIFT(to state 123)]
From state #123
 [term 39:REDUCE(with prod 32)]
From state #124
 [term 39:SHIFT(to state 125)]
From state #125
 [term 39:REDUCE(with prod 33)]
From state #126
 [term 39:SHIFT(to state 4)]
From state #127
 [term 28:SHIFT(to state 128)]
From state #128
 [term 18:SHIFT(to state 117)] [term 29:SHIFT(to state 131)]
From state #129
 [term 39:SHIFT(to state 4)]
From state #130
 [term 29:REDUCE(with prod 27)] [term 35:REDUCE(with prod 27)]
From state #131
 [term 31:SHIFT(to state 157)]
From state #132
 [term 29:SHIFT(to state 134)] [term 35:SHIFT(to state 133)]
From state #133
 [term 18:SHIFT(to state 117)]
From state #134
 [term 31:SHIFT(to state 135)]
From state #135
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 12:SHIFT(to state 136)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 117)]
 [term 31:SHIFT(to state 27)] [term 39:SHIFT(to state 4)]
From state #136
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #137
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 12:SHIFT(to state 143)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 117)]
 [term 31:SHIFT(to state 27)] [term 39:SHIFT(to state 4)]
From state #138
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 12:SHIFT(to state 139)]
 [term 17:SHIFT(to state 20)] [term 31:SHIFT(to state 27)]
 [term 39:SHIFT(to state 4)]
From state #139
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #140
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 141)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #141
 [term 32:SHIFT(to state 142)]
From state #142
 [term 32:REDUCE(with prod 18)] [term 35:REDUCE(with prod 18)]
From state #143
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #144
 [term 2:REDUCE(with prod 25)] [term 6:REDUCE(with prod 25)]
 [term 8:REDUCE(with prod 25)] [term 10:REDUCE(with prod 25)]
 [term 12:REDUCE(with prod 25)] [term 17:REDUCE(with prod 25)]
 [term 18:REDUCE(with prod 25)] [term 31:REDUCE(with prod 25)]
 [term 32:REDUCE(with prod 25)] [term 39:REDUCE(with prod 25)]
From state #145
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 12:SHIFT(to state 146)]
 [term 17:SHIFT(to state 20)] [term 31:SHIFT(to state 27)]
 [term 39:SHIFT(to state 4)]
From state #146
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #147
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 148)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #148
 [term 32:SHIFT(to state 149)]
From state #149
 [term 32:REDUCE(with prod 16)] [term 35:REDUCE(with prod 16)]
From state #150
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 151)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #151
 [term 32:SHIFT(to state 152)]
From state #152
 [term 32:REDUCE(with prod 17)] [term 35:REDUCE(with prod 17)]
From state #153
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 154)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #154
 [term 32:SHIFT(to state 155)]
From state #155
 [term 32:REDUCE(with prod 19)] [term 35:REDUCE(with prod 19)]
From state #156
 [term 29:REDUCE(with prod 28)] [term 35:REDUCE(with prod 28)]
From state #157
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 12:SHIFT(to state 158)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 117)]
 [term 31:SHIFT(to state 27)] [term 39:SHIFT(to state 4)]
From state #158
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #159
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 12:SHIFT(to state 165)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 117)]
 [term 31:SHIFT(to state 27)] [term 39:SHIFT(to state 4)]
From state #160
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 12:SHIFT(to state 161)]
 [term 17:SHIFT(to state 20)] [term 31:SHIFT(to state 27)]
 [term 39:SHIFT(to state 4)]
From state #161
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #162
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 163)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #163
 [term 32:SHIFT(to state 164)]
From state #164
 [term 32:REDUCE(with prod 22)] [term 35:REDUCE(with prod 22)]
From state #165
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #166
 [term 2:SHIFT(to state 19)] [term 8:SHIFT(to state 25)]
 [term 10:SHIFT(to state 18)] [term 12:SHIFT(to state 167)]
 [term 17:SHIFT(to state 20)] [term 31:SHIFT(to state 27)]
 [term 39:SHIFT(to state 4)]
From state #167
 [term 11:SHIFT(to state 43)] [term 13:SHIFT(to state 40)]
 [term 14:SHIFT(to state 42)] [term 15:SHIFT(to state 39)]
 [term 27:SHIFT(to state 45)] [term 28:SHIFT(to state 46)]
 [term 39:SHIFT(to state 44)] [term 40:SHIFT(to state 47)]
From state #168
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 169)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #169
 [term 32:SHIFT(to state 170)]
From state #170
 [term 32:REDUCE(with prod 20)] [term 35:REDUCE(with prod 20)]
From state #171
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 172)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #172
 [term 32:SHIFT(to state 173)]
From state #173
 [term 32:REDUCE(with prod 21)] [term 35:REDUCE(with prod 21)]
From state #174
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 26:SHIFT(to state 52)] [term 30:SHIFT(to state 175)]
 [term 33:SHIFT(to state 50)] [term 37:SHIFT(to state 49)]
 [term 38:SHIFT(to state 55)]
From state #175
 [term 32:SHIFT(to state 176)]
From state #176
 [term 32:REDUCE(with prod 23)] [term 35:REDUCE(with prod 23)]
From state #177
 [term 29:REDUCE(with prod 29)] [term 35:REDUCE(with prod 29)]
From state #178
 [term 32:SHIFT(to state 181)] [term 35:SHIFT(to state 180)]
From state #179
 [term 0:REDUCE(with prod 8)] [term 35:REDUCE(with prod 8)]
From state #180
 [term 6:SHIFT(to state 116)]
From state #181
 [term 0:REDUCE(with prod 6)] [term 35:REDUCE(with prod 6)]
From state #182
 [term 32:REDUCE(with prod 15)] [term 35:REDUCE(with prod 15)]
From state #183
 [term 0:REDUCE(with prod 7)] [term 35:REDUCE(with prod 7)]
From state #184
 [term 30:SHIFT(to state 185)]
From state #185
 [term 2:REDUCE(with prod 26)] [term 6:REDUCE(with prod 26)]
 [term 8:REDUCE(with prod 26)] [term 10:REDUCE(with prod 26)]
 [term 12:REDUCE(with prod 26)] [term 17:REDUCE(with prod 26)]
 [term 18:REDUCE(with prod 26)] [term 31:REDUCE(with prod 26)]
 [term 32:REDUCE(with prod 26)] [term 39:REDUCE(with prod 26)]
From state #186
 [term 32:SHIFT(to state 192)] [term 35:SHIFT(to state 180)]
From state #187
 [term 6:SHIFT(to state 116)] [term 18:SHIFT(to state 117)]
 [term 32:SHIFT(to state 190)]
From state #188
 [term 0:REDUCE(with prod 13)] [term 35:REDUCE(with prod 13)]
From state #189
 [term 32:SHIFT(to state 191)] [term 35:SHIFT(to state 180)]
From state #190
 [term 0:REDUCE(with prod 12)] [term 35:REDUCE(with prod 12)]
From state #191
 [term 0:REDUCE(with prod 10)] [term 35:REDUCE(with prod 10)]
From state #192
 [term 0:REDUCE(with prod 11)] [term 35:REDUCE(with prod 11)]
From state #193
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 1->state 2]
From state #1
From state #2
 [non term 2->state 102] [non term 3->state 100]
From state #3
 [non term 22->state 5]
From state #4
From state #5
From state #6
From state #7
From state #8
From state #9
From state #10
From state #11
From state #12
From state #13
From state #14
 [non term 22->state 15]
From state #15
From state #16
From state #17
 [non term 12->state 28] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #18
From state #19
 [non term 21->state 94]
From state #20
From state #21
From state #22
From state #23
From state #24
From state #25
From state #26
From state #27
 [non term 11->state 34] [non term 12->state 35] [non term 13->state 22]
 [non term 14->state 24] [non term 15->state 26] [non term 16->state 29]
 [non term 17->state 30] [non term 18->state 31] [non term 19->state 21]
 [non term 22->state 23]
From state #28
From state #29
From state #30
From state #31
From state #32
From state #33
From state #34
 [non term 12->state 37] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #35
From state #36
From state #37
From state #38
 [non term 21->state 41]
From state #39
 [non term 22->state 74]
From state #40
From state #41
From state #42
From state #43
From state #44
From state #45
 [non term 21->state 71]
From state #46
 [non term 21->state 48]
From state #47
From state #48
From state #49
 [non term 21->state 70]
From state #50
 [non term 21->state 68]
From state #51
From state #52
 [non term 21->state 67]
From state #53
 [non term 21->state 66]
From state #54
 [non term 21->state 65]
From state #55
 [non term 22->state 57]
From state #56
From state #57
From state #58
 [non term 20->state 61] [non term 21->state 59]
From state #59
From state #60
From state #61
From state #62
 [non term 21->state 64]
From state #63
From state #64
From state #65
From state #66
From state #67
From state #68
From state #69
From state #70
From state #71
From state #72
 [non term 12->state 73] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #73
From state #74
From state #75
From state #76
 [non term 21->state 77]
From state #77
From state #78
From state #79
From state #80
From state #81
 [non term 21->state 85]
From state #82
 [non term 21->state 83]
From state #83
From state #84
From state #85
From state #86
From state #87
 [non term 21->state 88]
From state #88
From state #89
From state #90
 [non term 21->state 91]
From state #91
From state #92
From state #93
From state #94
From state #95
From state #96
 [non term 21->state 97]
From state #97
From state #98
 [non term 12->state 99] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #99
From state #100
From state #101
 [non term 22->state 105]
From state #102
From state #103
 [non term 3->state 104]
From state #104
From state #105
From state #106
 [non term 6->state 187] [non term 7->state 114] [non term 8->state 186]
 [non term 9->state 110] [non term 10->state 111]
From state #107
 [non term 22->state 108]
From state #108
From state #109
 [non term 6->state 113] [non term 7->state 114] [non term 8->state 112]
 [non term 9->state 110] [non term 10->state 111]
From state #110
From state #111
 [non term 22->state 184]
From state #112
From state #113
 [non term 7->state 144] [non term 8->state 178] [non term 9->state 110]
 [non term 10->state 111]
From state #114
From state #115
From state #116
 [non term 10->state 126]
From state #117
From state #118
From state #119
 [non term 23->state 120]
From state #120
From state #121
 [non term 24->state 122]
From state #122
From state #123
 [non term 25->state 124]
From state #124
From state #125
From state #126
 [non term 22->state 127]
From state #127
From state #128
 [non term 4->state 132] [non term 5->state 130] [non term 10->state 129]
From state #129
 [non term 22->state 177]
From state #130
From state #131
From state #132
From state #133
 [non term 5->state 156] [non term 10->state 129]
From state #134
From state #135
 [non term 6->state 137] [non term 7->state 114] [non term 10->state 111]
 [non term 11->state 138] [non term 12->state 35] [non term 13->state 22]
 [non term 14->state 24] [non term 15->state 26] [non term 16->state 29]
 [non term 17->state 30] [non term 18->state 31] [non term 19->state 21]
 [non term 22->state 23]
From state #136
 [non term 21->state 153]
From state #137
 [non term 7->state 144] [non term 10->state 111] [non term 11->state 145]
 [non term 12->state 35] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #138
 [non term 12->state 37] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #139
 [non term 21->state 140]
From state #140
From state #141
From state #142
From state #143
 [non term 21->state 150]
From state #144
From state #145
 [non term 12->state 37] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #146
 [non term 21->state 147]
From state #147
From state #148
From state #149
From state #150
From state #151
From state #152
From state #153
From state #154
From state #155
From state #156
From state #157
 [non term 6->state 159] [non term 7->state 114] [non term 10->state 111]
 [non term 11->state 160] [non term 12->state 35] [non term 13->state 22]
 [non term 14->state 24] [non term 15->state 26] [non term 16->state 29]
 [non term 17->state 30] [non term 18->state 31] [non term 19->state 21]
 [non term 22->state 23]
From state #158
 [non term 21->state 174]
From state #159
 [non term 7->state 144] [non term 10->state 111] [non term 11->state 166]
 [non term 12->state 35] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #160
 [non term 12->state 37] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #161
 [non term 21->state 162]
From state #162
From state #163
From state #164
From state #165
 [non term 21->state 171]
From state #166
 [non term 12->state 37] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 26] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #167
 [non term 21->state 168]
From state #168
From state #169
From state #170
From state #171
From state #172
From state #173
From state #174
From state #175
From state #176
From state #177
From state #178
From state #179
From state #180
 [non term 9->state 182]
From state #181
From state #182
From state #183
From state #184
From state #185
From state #186
From state #187
 [non term 7->state 144] [non term 8->state 189] [non term 9->state 110]
 [non term 10->state 111]
From state #188
From state #189
From state #190
From state #191
From state #192
From state #193
-----------------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 3 warnings
  41 terminals, 26 non-terminals, and 70 productions declared, 
  producing 194 unique parse states.
  3 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
